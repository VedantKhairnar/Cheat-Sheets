 $ git config --global -e
$ git config --global -l

Install GIT 2:
# rpm -ivh endpoint-repo.1.7.rpm
# yum install git

git --version
Create GIT repo or initialized git:
# mkdir myprojects
# cd myprojects
# git init demo
# cd demo
# ls -a (there folder .git, that is git repo)
Set identity to git, that recorded in version log
# git config --global user.name “Vimal Daga”
# git config --global user.email “vdaga@lwindia.com”

Git States with Local:

Working Directory : all files present in above “demo” folder

Staging Area : file preparing for commit, first store in staging area, then only we can commit

Repository/Commit History : committed with version or save changes to git repo

Git States with Remote:
Remote State : repo shared to centralized system like GITHUB
# cat > test.txt
First line
# git status
Put file in the staging area, without putting file here, we can't create commit history
# git add test.txt
Send file to repo/commit area, here we have created snapshot of file means version of file
# git commit -m “first comment” text.txt
To check all version of file, every commit they provide commit id
# git log test.txt
See details of log
# git show commitID
We can use commit id’s to see the diff in 2 version
# git diff id1 id2

Remove git repo
# rm -rf .git

Again create git repo in existing project, go to project folder
# git init

Add all file in staging area
# git add .

Add all file in commit area
# git -m “comment” commit .
Create new file, that is not by default tracked by git
# touch new.txt
Show tracked file by git
# git ls-files

Staging and Committing file in one command : Express commit
# git commit -a -m “comment” file.txt
Note: not all version of git support this
HEAD Markers : Special Markers Like pointers, points to last commit of current branch
How to make file untracked or removed from staging area:
# git reset HEAD new.txt
Rollback file data to any point in time:
# git log file.txt
Get commit id, at what point we want to rollback
# git reset commitID file.txt
# git checkout -- file.txt
Get clone of project over the network using ssh:
# git clone root@remoteip:/myprojects/demo
Get git help of subcommand:
# git help log
# git log --oneline --graph --decorate --all
Create alias in git:
# git config --global alias.hist “log --oneline --graph --decorate --all”
# git config --global --list
# git hist
# git hist test.txt
Rename file in git
# git mv test.txt testnew.txt
# git commit -m “comment rename” testnew.txt
# git commit -m “commit delete” test.txt
Delete file in git
# git rm file.txt
# git commit -m “comment delete” file.txt
# git commit -m “commit delete” file.txt
Managing file deleting or copy from outside working directory:
# cp outfile.txt demo/
# rm text.txt

To update git for deletion
# git add -u

For all modification
# git add -A
# git commit -m “comment” .
Excluding file to untracked by git:
Let say, we want to ignore all file with png extension
# cat > .gitignore
*.png
# git add .gitignore
# git commit -m “ignored” .gitignore
# touch my.png
# git status
Branching: timeline of commits, by default branch is master, we can create several branch from
master branch

Merge: merge other branch to master

Fast forward merge: simplest case, like never branched , commits on destination, can be
disabled

Automatic merge: non-conflicting merge detected, preserves both timelines, merge commit on
destination

Manual Merge: automatic merge not possible, conflicting merge state, changes saved in merge
commit

List of all branches:
# git branch
Note: “*” here means current branch name
# cat > web.txt

First line
# git add .
# git commit -m comment1 .
Create new branch “dev2” and its pull all file data from master branch
# git checkout -b dev2
# cat >> web.txt
Second line
Commit data in current branch “dev2”
# git commit -m comment2 .
Switch to master branch
# git checkout master
Note: u wont able to see, data commit in “dev2” branch
If you want to pull data from “dev2” branch and merge in master branch
Its will do fast forward merge
# git merge dev2
Delete branch:
# git branch -d dev2
-----------------------------------------------------------------------------
Manual Merge - Conflicting merge resolution:
# cat > app.txt
Data1
Data2
# git add .
# git commit -m com1 .
# git checkout -b dev2
# vim app.txt
Changes data1 to newdata(in first line)
# git commit -m com2 .
# git checkout master
# vim app.txt
Changes data1 to masterdata(in first line)
# git commit -m com3 .
# git merge dev2
Its shows error auto merging conflict

For testing, go to workstation:
# ssh -T git@github.com
Clone repo from github, to local system using SSH :
We are cloning from github to new dir called mylocalrepodir, it will clone without passphrase :
# git clone git@github.com:vimallinuxworld13/test1111.git mylocarepodir
------------------------------------------------------------------------------------------------------------------------
Change remote github repo name:
Change remote url in local repo:
# git remote set-url origin git@github.com:vimallinuxworld13/test2222.git
# git remote -v
# git remote show origin
Delete remote ref :
# git remote remove origin
-------------------------------------------------------------------------------------------------------------------------
Show data from repo at that particular point in time
# git show commitID (get from git log)
Create new branch from GITHub:
Create local branch and sync to github:
# git checkout -b testbranch1
It creates new branch in github:
# git push -u origin testbranch1
--------------------------------------------------------------------------
How to do pull request and merge in master branch from other branch in github :
Eg:
This is data in master branch:
Other branch here, named dev2 changes data:
This shows, we have 2 branch ahead of master branch:
Now you can click on “compare and pull request” button, from where to get the merge in master
branch, we are pulling from dev2 in master
Finally merge from dev2 to master branch:
Finally in master branch, we merged from dev2 branch:
Example of merge conflict:
This is data in master:
This is data in dev3 :
Now if we merge, it wont allow, as conflict :
But we can request pull:
We have to do manual resolve, click resolve conflicts button
Get local repo synced from github:
----------------------------------------------------------------------------
Remove branches “dev3” from github and update it ref to local:
# git branch -d dev3
Remove ref of dev3 branch from local to origin (prune branch)
# git fetch -p
---------------------------------------------------------------------------------------------------------
How to sync branch create in github, synced with local repo:
Create example branch from github:
Changed in example branch:

Here:
# git checkout example
Automatic create local branch and start tracking it
----------------------------------------------------------------------------------------------
Sync all repo data from all branch:
# git pull --all
Delete branch from local cli to github:
# git branch -d example
# git push origin :example
Note: here “:” means delete example branch
---------------------------------------------------------------------------------------------------
Git graph, show all commit and merge in all branches in graphical form :
# git log --graph
From github, graph (name changed to insight):
-------------------------------------------------------------------------------------------
How to change default branch:
Benefit of making other branch default:
● When do git clone, it get from other branch
● When we create other branch, it used base branch from that default branch
● It good for production use case, make production data comes from master branch, and
all development work on that new default branch, so accidently nobody changes or
merge in master branch
---------------------------------------------------------------------
When we have trouble of conflict with pulling :
This scenario, comes when we changed at github, then using “git fetch” at local, and before “git
pull” , we changed locally and commit:
We have to use mergetool, to merge manually :
Steps to solve “diverged” conflict issue:
# git pull
manual merge
# git mergetool
# git commit -m "comment"
# git push
----------------------------------------------------------------------------------------
Get source branch or base branch(master) update into sec branch(dev1): rewind sub branch
In master branch:
# cat >> test.txt
Changes from master
# git commit -m “changed from master” .
# git checkout dev1
Get dev1 updated data from master branch (something like opposite of merge):
# git rebase master
# cat test.txt (sec branch dev1 get updated data from master branch)
or
$ git branch --set-upstream-to=master dev3
$ git pull
$ git branch --show-current
In conflict of rebasing:
# git rebase --abort
# git mergetool
# git add .
# git commit
# git rebase --continue
If local repo and git hub changes and commit, and we want to update local repo from github,
before it push to github:
# git pull --rebase origin master
# git push
----------------------------------------------------------------------------------------------------------------------------
If we don't want to commit changes in file, as we are in work in progress(WIP), but want to save
state of file, and want to work in other file to commit changes :
# git stash save (or git stash)
# git stash list
Go back to the same state, where we saved file, to continue your work from there
# git stash apply
# git stash drop
Stash doesnt stash untracked file by default , if you want to stash all file from staging and
working area:
# git stash -u
And to apply and drop in single command, we can use “pop”:
# git stash pop
If we want to create multiple stash, having multiple WIP :
Clear all stash, also remove all WIP data:
# git stash clear
If you changed or create something in master branch, then release it might create issue in code,
then we can take all these changes to new branch, and make master branch clean:
------------------------------------------------------------------------------
How to amend previously committed ID, new data or files:
Always good practise to do in new branch, as while doing amend, it changes commit ID:
# git checkout -b newb
# git commit --amend -m “new changes”
Its shows only reachable history:
# git log --oneline
But if we want to see all history, even that is unreachable because of amend:
# git reflog
To get and start working again in orphaned branch:
# git checkout commitID
# git checkout -b newbranch
Go to history at particular time:
# git reflog HEAD@{2.days.ago}
# git reflog master@{2020-01-13}
# git diff HEAD@{2} HEAD@{3}
# git reflog expire --expire-unreachable=now --all
# git gc --prune=now
----------------------------------------------
Git GUI client :
-----------------
https://www.gitkraken.com/download
-------------------------------------------------------------------------------------------------------------------------------
Install GIT bash for windows:
https://git-scm.com/downloads



https://notepad-plus-plus.org/downloads/v7.8.6/









--------------------------------------------------------------------------------------------------------------------------
Create Repo in GIThub:
----------------------------------------------------------------------------------
Remove https url and change to ssh:
# ssh-keygen.exe
# cat homedir/.ssh/id_rsa.pub
Add public key into : github -> setting -> ssh and gpg keys -> new ssh key
Test Connection:
# ssh -T git@github.com
# git remote -v
# git remote remove origin
# git remote add origin git@github.com:vimallinuxworld13/testmlops.git
# git remote show origin
# git push --set-upstream origin master
# git remote show origin
----------------------------------------------------------------------------------------
# git config --list --show-origin
# git clone https://github.com/vimallinuxworld13/test1234.git --branch dev1
$ git config --global --unset user.email
$ git config --global --unset user.name
$ git config --global --list
------------------------------------------------------------------------------------------------------------------
$ git branch -a
$ git branch dev1
$ git checkout dev1
$ git log --oneline --decorate
Rename branch name:
$ git branch -m dev1 dev1new
Delete branch:
$ git branch -d dev1new
$ git checkout -b dev1
$ git commit -am "change at dev1"
$ git log --oneline
$ git checkout master
$ git diff master dev1
Fast forward merge:
$ git merge dev1
$ git log --oneline --graph --decorate
It do fast forward merge: and only possible if no changes done at target branch
https://www.atlassian.com/git/tutorials/using-branches/merge-strategy
Recursive merge (disable fast forward merge) :
$ git merge dev1 --no-ff
$ git checkout dev1
$ git rebase master
$ gitk
